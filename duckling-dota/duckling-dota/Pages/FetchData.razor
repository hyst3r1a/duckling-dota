@page "/fetchdata"

@using duckling_dota.Data
@using duckling_dota.Data.Models
@inject DucklingPointsService PointsService

<h1>Подсчёт утиных очков: Dota 2 - разрядизация @DucklingPointsService.TierDate</h1>
<p>Запросы ограничены - 50000/месяц. Для защиты от перегрева АПИ подсчёт очков доступен только офицерам.</p>
@if (PointsService.doters == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Dota Id</th>
                <th>Пати: 2 утенка</th>
                <th>Пати: 3 утенка</th>
                <th>Пати: 4 утенка</th>
                <th>Пати: 5 утят</th>
                <th>Всего очков</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doter in PointsService.doters)
            {
                <tr>
                    <td>@doter.Name</td>
                    <td>@doter.DotaId</td>

                    @if (PointsService.playerResults.FirstOrDefault(x => x.player == doter) != null)
                    {
                        <td>@PointsService.playerResults.FirstOrDefault(x => x.player == doter).DuoGames</td>
                        <td>@PointsService.playerResults.FirstOrDefault(x => x.player == doter).TrioGames</td>
                        <td>@PointsService.playerResults.FirstOrDefault(x => x.player == doter).QuoGames</td>
                        <td>@PointsService.playerResults.FirstOrDefault(x => x.player == doter).PentaGames</td>
                        <td>@PointsService.playerResults.FirstOrDefault(x => x.player == doter).SumGames</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    PlayerResults cacheResult = null;

    protected override async Task OnInitializedAsync()
    {

        PointsService.GetAllDoters();
        foreach(var doter in PointsService.doters)
        {
            PointsService.CountPointsForPlayer(doter);
        }

    }
    private void CacheResult(DucklingDoter doter)
    {
        cacheResult = PointsService.playerResults.First(x => x.player == doter);
    }
}
